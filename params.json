{"name":"Aeon Labs Multi-sense","tagline":"","body":"metadata {\r\n\t// Automatically generated. Make future change here.\r\n\tdefinition (name: \"Aeon Multisensor-1 min\", namespace: \"Smartthings\", author: \"????\") {\r\n\t\tcapability \"Motion Sensor\"\r\n\t\tcapability \"Temperature Measurement\"\r\n\t\tcapability \"Relative Humidity Measurement\"\r\n\t\tcapability \"Configuration\"\r\n\t\tcapability \"Illuminance Measurement\"\r\n\t\tcapability \"Sensor\"\r\n\t\tcapability \"Battery\"\r\n\r\n\t\tfingerprint deviceId: \"0x2001\", inClusters: \"0x30,0x31,0x80,0x84,0x70,0x85,0x72,0x86\"\r\n\t}\r\n\r\n\tsimulator {\r\n\t\t// messages the device returns in response to commands it receives\r\n\t\tstatus \"motion (basic)\"     : \"command: 2001, payload: FF\"\r\n\t\tstatus \"no motion (basic)\"  : \"command: 2001, payload: 00\"\r\n\t\tstatus \"motion (binary)\"    : \"command: 3003, payload: FF\"\r\n\t\tstatus \"no motion (binary)\" : \"command: 3003, payload: 00\"\r\n\r\n\t\tfor (int i = 0; i <= 100; i += 20) {\r\n\t\t\tstatus \"temperature ${i}F\": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(\r\n\t\t\t\tscaledSensorValue: i, precision: 1, sensorType: 1, scale: 1).incomingMessage()\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i <= 100; i += 20) {\r\n\t\t\tstatus \"humidity ${i}%\": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(\r\n\t\t\t\tscaledSensorValue: i, precision: 0, sensorType: 5).incomingMessage()\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i <= 100; i += 20) {\r\n\t\t\tstatus \"luminance ${i} lux\": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(\r\n\t\t\t\tscaledSensorValue: i, precision: 0, sensorType: 3).incomingMessage()\r\n\t\t}\r\n\t\tfor (int i = 200; i <= 1000; i += 200) {\r\n\t\t\tstatus \"luminance ${i} lux\": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(\r\n\t\t\t\tscaledSensorValue: i, precision: 0, sensorType: 3).incomingMessage()\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i <= 100; i += 20) {\r\n\t\t\tstatus \"battery ${i}%\": new physicalgraph.zwave.Zwave().batteryV1.batteryReport(\r\n\t\t\t\tbatteryLevel: i).incomingMessage()\r\n\t\t}\r\n\t}\r\n\r\npreferences {\r\n\t\tinput(name: \"RHOffsetStr\", type: \"enum\", title: \"Humidity Offset \", options: [\"-10\",\"-8\",\"-6\",\"-4\",\"-2\",\"0\",\"2\",\"4\",\"6\",\"8\",\"10\"])\r\n}\r\n\r\n\r\ntiles {\r\n\t\tstandardTile(\"motion\", \"device.motion\", width: 2, height: 2) {\r\n\t\t\tstate \"active\", label:'motion', icon:\"st.motion.motion.active\", backgroundColor:\"#53a7c0\"\r\n\t\t\tstate \"inactive\", label:'no motion', icon:\"st.motion.motion.inactive\", backgroundColor:\"#ffffff\"\r\n\t\t}\r\n\t\tvalueTile(\"temperature\", \"device.temperature\", inactiveLabel: false) {\r\n\t\t\tstate \"temperature\", label:'${currentValue}Â°',\r\n\t\t\tbackgroundColors:[\r\n\t\t\t\t[value: 31, color: \"#153591\"],\r\n\t\t\t\t[value: 44, color: \"#1e9cbb\"],\r\n\t\t\t\t[value: 59, color: \"#90d2a7\"],\r\n\t\t\t\t[value: 74, color: \"#44b621\"],\r\n\t\t\t\t[value: 84, color: \"#f1d801\"],\r\n\t\t\t\t[value: 95, color: \"#d04e00\"],\r\n\t\t\t\t[value: 96, color: \"#bc2323\"]\r\n\t\t\t]\r\n\t\t}\r\n\r\n\r\n\t\tvalueTile(\"humidity\", \"device.humidity\") {\r\n\t\t\tstate \"default\", label:'Sunroom: ${currentValue}%',\r\n\t\t\t\tbackgroundColors:[\r\n                \t[value: 19, color: \"#bc2323\"],\r\n\t\t\t\t\t[value: 31, color: \"#d04e00\"],\r\n\t\t\t\t\t[value: 44, color: \"#f1d801\"],\r\n\t\t\t\t\t[value: 59, color: \"#44b621\"],\r\n\t\t\t\t\t[value: 74, color: \"#90d2a7\"],\r\n\t\t\t\t\t[value: 84, color: \"#1e9cbb\"],\r\n\t\t\t\t\t[value: 95, color: \"#153591\"],\r\n\t\t\t\t\t[value: 96, color: \"#9F8ACD\"]\r\n\t\t\t\t]\r\n\t\t}\r\n\r\n\r\n\r\nvalueTile(\"illuminance\", \"device.illuminance\", inactiveLabel: false) {\r\n\t\t\tstate \"luminosity\", label:'${currentValue} ${unit}', unit:\"lux\"\r\n\t\t}\r\n\t\tvalueTile(\"battery\", \"device.battery\", inactiveLabel: false, decoration: \"flat\") {\r\n\t\t\tstate \"battery\", label:'${currentValue}% battery', unit:\"\"\r\n\t\t}\r\n\t\tstandardTile(\"configure\", \"device.configure\", inactiveLabel: false, decoration: \"flat\") {\r\n\t\t\tstate \"configure\", label:'', action:\"configuration.configure\", icon:\"st.secondary.configure\"\r\n\t\t}\r\n\r\n\t\tmain([\"motion\", \"temperature\", \"humidity\", \"illuminance\"])\r\n\t\tdetails([\"motion\", \"temperature\", \"humidity\", \"illuminance\", \"battery\", \"configure\"])\r\n\t}\r\n}\r\n\r\n// Parse incoming device messages to generate events\r\ndef parse(String description)\r\n{\r\n\tdef result = []\r\n\tdef cmd = zwave.parse(description, [0x31: 2, 0x30: 1, 0x84: 1])\r\n\tif (cmd) {\r\n\t\tif( cmd.CMD == \"8407\" ) { result << new physicalgraph.device.HubAction(zwave.wakeUpV1.wakeUpNoMoreInformation().format()) }\r\n\t\tresult << createEvent(zwaveEvent(cmd))\r\n\t}\r\n\tlog.debug \"Parse returned ${result}\"\r\n\treturn result\r\n}\r\n\r\n// Event Generation\r\ndef zwaveEvent(physicalgraph.zwave.commands.wakeupv1.WakeUpNotification cmd)\r\n{\r\n\t[descriptionText: \"${device.displayName} woke up\", isStateChange: false]\r\n}\r\n\r\ndef zwaveEvent(physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd)\r\n{\r\n\tdef map = [:]\r\n\tswitch (cmd.sensorType) {\r\n\t\tcase 1:\r\n\t\t\t// temperature\r\n\t\t\tdef cmdScale = cmd.scale == 1 ? \"F\" : \"C\"\r\n\t\t\tmap.value = convertTemperatureIfNeeded(cmd.scaledSensorValue, cmdScale, cmd.precision)\r\n\t\t\tmap.unit = getTemperatureScale()\r\n\t\t\tmap.name = \"temperature\"\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\t// luminance\r\n\t\t\tmap.value = cmd.scaledSensorValue.toInteger().toString()\r\n\t\t\tmap.unit = \"lux\"\r\n\t\t\tmap.name = \"illuminance\"\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\t// humidity\r\n   \t\t\tdef RHOffset=RHOffsetStr as Integer\r\n            def RHAdjusted = cmd.scaledSensorValue.toInteger() + RHOffset\r\n\t\t\tmap.value = RHAdjusted.toString()\r\n\t\t\tmap.unit = \"%\"\r\n\t\t\tmap.name = \"humidity\"\r\n\t\t\tbreak;\r\n\t}\r\n\tmap\r\n}\r\n\r\ndef zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {\r\n\tdef map = [:]\r\n\tmap.name = \"battery\"\r\n\tmap.value = cmd.batteryLevel > 0 ? cmd.batteryLevel.toString() : 1\r\n\tmap.unit = \"%\"\r\n\tmap.displayed = false\r\n\tmap\r\n}\r\n\r\ndef zwaveEvent(physicalgraph.zwave.commands.sensorbinaryv1.SensorBinaryReport cmd) {\r\n\tdef map = [:]\r\n\tmap.value = cmd.sensorValue ? \"active\" : \"inactive\"\r\n\tmap.name = \"motion\"\r\n\tif (map.value == \"active\") {\r\n\t\tmap.descriptionText = \"$device.displayName detected motion\"\r\n\t}\r\n\telse {\r\n\t\tmap.descriptionText = \"$device.displayName motion has stopped\"\r\n\t}\r\n\tmap\r\n}\r\n\r\ndef zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {\r\n\tdef map = [:]\r\n\tmap.value = cmd.value ? \"active\" : \"inactive\"\r\n\tmap.name = \"motion\"\r\n\tif (map.value == \"active\") {\r\n\t\tmap.descriptionText = \"$device.displayName detected motion\"\r\n\t}\r\n\telse {\r\n\t\tmap.descriptionText = \"$device.displayName motion has stopped\"\r\n\t}\r\n\tmap\r\n}\r\n\r\ndef zwaveEvent(physicalgraph.zwave.Command cmd) {\r\n\tlog.debug \"Catchall reached for cmd: ${cmd.toString()}}\"\r\n\t[:]\r\n}\r\n\r\ndef configure() {\r\n\tdelayBetween([\r\n\t// send binary sensor report instead of basic set for motion\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 5, size: 1, scaledConfigurationValue: 2).format(),\r\n\r\n\t// send no-motion report 1 minute after motion stops\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 3, size: 2, scaledConfigurationValue: 60).format(),\r\n\r\n\t// send illuminance data periodically\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 101, size: 4, scaledConfigurationValue: 128).format(),\r\n\r\n        // send humidity & temperature data periodically\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 102, size: 4, scaledConfigurationValue: 96).format(),  \r\n\r\n        // send battery periodically\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 103, size: 4, scaledConfigurationValue: 1).format(),\r\n\r\n        // send illuminance data every 4 minutes\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 111, size: 4, scaledConfigurationValue: 240).format(),\r\n\r\n        // send humidity & temperature data every 4 minutes\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 112, size: 4, scaledConfigurationValue: 120).format(),\r\n\r\n\t// send battery every 1 hour\r\n\t\tzwave.configurationV1.configurationSet(parameterNumber: 113, size: 4, scaledConfigurationValue: 3590).format()\r\n\t])\r\n}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}